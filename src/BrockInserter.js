import {
	serializeBlockTree,
	createBlockTree,
	flattenBlocks,
} from "itmar-block-packages";
import { createBlock, getBlockType } from "@wordpress/blocks";
import { useEffect } from "@wordpress/element";
import { useDispatch } from "@wordpress/data";

//Shopifyフィールド生成用関数
const createShopifyBlockAttr = (selectedField) => {
	let blockAttributes = {};

	switch (selectedField.block) {
		case "itmar/design-title":
			blockAttributes = {
				className: `sp_field_${selectedField.key}`,
				headingContent: `[${selectedField.label}]`,
			};

			break;
		case "core/paragraph":
			blockAttributes = {
				className: `itmar_ex_block sp_field_${selectedField.key}`,
				content: `[${selectedField.label}]`,
			};
			break;
		case "core/image":
			blockAttributes = {
				className: `itmar_ex_block sp_field_${selectedField.key}`,
				url: `${ec_relate_blocks.plugin_url}/assets/image/main_sample.png`,
			};
			break;
		case "itmar/slide-mv":
			const spaceAttributes = {
				margin_val: {
					type: "object",
					default: {
						top: "0em",
						left: "0em",
						bottom: "0em",
						right: "0em",
					},
				},
				padding_val: {
					type: "object",
					default: {
						top: "0em",
						left: "0em",
						bottom: "0em",
						right: "0em",
					},
				},
			};

			const imageBlock = createBlock("core/image", {
				className: "itmar_ex_block",
				url: `${ec_relate_blocks.plugin_url}/assets/image/slide_sample.png`,
				...spaceAttributes,
			});
			//Design Blockの初期設定を取得
			const blockType = getBlockType("itmar/design-group");
			const defaultValBase = blockType?.attributes?.default_val?.default ?? {};
			const mobileValBase = blockType?.attributes?.mobile_val?.default ?? {};
			const slideBlock = createBlock(
				"itmar/design-group",
				{
					default_val: {
						...defaultValBase,
						width_val: "fit",
					},
					mobile_val: {
						...mobileValBase,
						width_val: "fit",
					},
				},
				[imageBlock],
			);
			//slideBlock をシリアライズ
			const serializedSlide = serializeBlockTree(slideBlock);
			// 同じスライドブロックを5つ複製（独立したブロックとして）
			const slideBlocks = Array.from({ length: 5 }, () =>
				createBlockTree(serializedSlide),
			);
			//子ブロック付きで返す
			blockAttributes = {
				attributes: { className: `sp_field_${selectedField.key}` },
				slideBlocks: slideBlocks,
			};
			break;
		default:
			blockAttributes = {
				className: `sp_field_${selectedField.key}`,
				headingContent: `[${selectedField.label}]`,
			};
	}
	return blockAttributes;
};

//表示フィールド変更によるインナーブロックの再構成
export const useRebuildChangeField = (
	dispAttributeArray,
	selectedFields,
	sectionCount,
	domType,
	block_type, //デバック用に残しておきます。
	clientId,
) => {
	// dispatch関数を取得
	const { replaceInnerBlocks } = useDispatch("core/block-editor");
	useEffect(() => {
		//dispAttributeArray の個数調整
		const blocksLength = dispAttributeArray.length;

		if (blocksLength < sectionCount) {
			// dispAttributeArrayの長さが短い場合、{}を追加する
			const diff = sectionCount - blocksLength;
			for (let i = 0; i < diff; i++) {
				dispAttributeArray.push({});
			}
		} else {
			// dispAttributeArrayの長さが長い場合、余分な要素を削除する
			dispAttributeArray.splice(sectionCount);
		}

		// インナーブロックに差し込むブロック配列を生成
		const blocksArray = dispAttributeArray.map((dispAttribute, unit_index) => {
			// blocksAttributesArray属性で登録されたブロックのclassName一覧（sp_field_xxx を拾う）
			const allBlocks = Array.isArray(dispAttribute.innerBlocks)
				? flattenBlocks(dispAttribute.innerBlocks) //階層になったブロックを平坦化
				: [];
			const existingKeys = allBlocks
				.map((block) => block.attributes?.className)
				.filter(Boolean)
				.map((cls) => {
					const match = cls.match(/sp_field_([\w-]+)/);
					return match?.[1];
				})
				.filter(Boolean);

			// selectedFields のうち未挿入のものだけ追加
			const autoGeneratedBlocks = selectedFields
				.filter((field) => !existingKeys.includes(field.key))
				.map((field) => {
					const attr = createShopifyBlockAttr(field);
					const blockName = field.block;
					const blockAttributes = attr?.attributes ?? attr;
					const innerBlocks = Array.isArray(attr?.slideBlocks)
						? attr.slideBlocks
						: [];

					return createBlock(blockName, blockAttributes, innerBlocks);
				});

			// blocksAttributesArray属性で登録されたブロックの再構築
			const selectedKeys = selectedFields.map((f) => f.key);

			const filterBlocksRecursively = (blocks) => {
				return blocks
					.map((block) => {
						const className = block.attributes?.className || "";
						const match = className.match(/sp_field_([a-zA-Z0-9_]+)/);

						// 再帰的に innerBlocks をフィルタ
						const filteredInner = block.innerBlocks
							? filterBlocksRecursively(block.innerBlocks)
							: [];

						const isAutoGenerated = !!match;
						const keep = !isAutoGenerated || selectedKeys.includes(match[1]);

						if (!keep) return null;

						// 構造を復元して返す
						return {
							...block,
							innerBlocks: filteredInner,
						};
					})
					.filter(Boolean); // null を除去
			};

			const userBlocks = Array.isArray(dispAttribute.innerBlocks)
				? filterBlocksRecursively(dispAttribute.innerBlocks).map(
						createBlockTree,
				  )
				: [];

			// autoGenerated（selectedFields） + userBlocks を合成
			const innerBlocks = [...userBlocks, ...autoGeneratedBlocks];

			const ret = createBlock(
				"itmar/design-group",
				{
					...dispAttribute.attributes,
					className: `unit_design_${unit_index}`,
					domType: domType,
				},
				innerBlocks,
			);
			return ret;
		});
		// 既存のインナーブロックを一括置換
		replaceInnerBlocks(clientId, blocksArray, false);
	}, [selectedFields]);
};
